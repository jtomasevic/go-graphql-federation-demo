package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/jtomasevic/go-graphql-federation-demo/actors/graph"
	"github.com/jtomasevic/go-graphql-federation-demo/actors/graph/model"
)

// Actors is the resolver for the actors field.
func (r *queryResolver) Actors(ctx context.Context) ([]model.Actor, error) {
	fmt.Println("actor->queryResolver->Actors")

	actors, err := r.Resolver.Services.ActorService.GetActors(ctx)
	if err != nil {
		return nil, err
	}
	result := []model.Actor{}
	for _, actor := range actors {
		result = append(result, model.Actor(actor))
	}
	return result, nil
}

// Actor is the resolver for the actor field.
func (r *queryResolver) Actor(ctx context.Context, name string) (model.Actor, error) {
	fmt.Println("actor->queryResolver->Actors")

	actor, err := r.Resolver.Services.ActorService.GetActorByName(ctx, name)
	if err != nil {
		return model.Actor{}, err
	}
	return model.Actor(actor), nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
